% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/utils_sourceRmd.R
\name{sourceRmd}
\alias{sourceRmd}
\title{Source the R code from an RMarkdown file}
\usage{
sourceRmd(path, wd = dirname(path), suppress = T, ...)
}
\arguments{
\item{path}{Path to RMarkdown file}

\item{wd}{Optional working directory to use for script execution. Defaults to the directory containing the RMarkdown file.}

\item{suppress}{Supress all output from executed code?}

\item{...}{
  Arguments passed on to \code{\link[base:source]{base::source}}
  \describe{
    \item{\code{file}}{a \link[base]{connection} or a character string giving the
    pathname of the file or URL to read from.  \code{""} indicates the
    connection \code{\link[base]{stdin}()}.}
    \item{\code{local}}{\code{TRUE}, \code{FALSE} or an environment, determining
    where the parsed expressions are evaluated.  \code{FALSE} (the
    default) corresponds to the user's workspace (the global
    environment) and \code{TRUE} to the environment from which
    \code{source} is called.}
    \item{\code{echo}}{logical; if \code{TRUE}, each expression is printed
    after parsing, before evaluation.}
    \item{\code{print.eval}}{logical; if \code{TRUE}, the result of
    \code{eval(i)} is printed for each expression \code{i}; defaults
    to the value of \code{echo}.}
    \item{\code{exprs}}{for \code{source()} and \code{withAutoprint(*, evaluated=TRUE)}:
    \emph{instead} of specifying \code{file}, an
    \code{\link[base]{expression}}, \code{\link[base]{call}}, or \code{\link[base]{list}}
    of \code{\link[base]{call}}'s, but \emph{not} an unevaluated \dQuote{expression}.

    for \code{withAutoprint()} (with default \code{evaluated=FALSE}):
    one or more unevaluated \dQuote{expressions}.
  }
    \item{\code{spaced}}{logical indicating if newline (hence empty line) should
    be printed before each expression (when \code{echo = TRUE}).}
    \item{\code{verbose}}{if \code{TRUE}, more diagnostics (than just
    \code{echo = TRUE}) are printed during parsing and evaluation of
    input, including extra info for \bold{each} expression.}
    \item{\code{prompt.echo}}{character; gives the prompt to be used if
    \code{echo = TRUE}.}
    \item{\code{max.deparse.length}}{integer; is used only if \code{echo} is
    \code{TRUE} and gives the maximal number of characters output for
    the deparse of a single expression.}
    \item{\code{width.cutoff}}{integer, passed to \code{\link[base]{deparse}()} which
    is used (only) when there are no source references.}
    \item{\code{deparseCtrl}}{\code{\link[base]{character}} vector, passed as
    \code{control} to \code{\link[base]{deparse}()}, see also
    \code{\link[base]{.deparseOpts}}.  In \R version <= 3.3.x, this was
    hardcoded to \code{"showAttributes"}, which is the default
    currently; \code{deparseCtrl = "all"} may be preferable, when strict
    back compatibility is not of importance.}
    \item{\code{chdir}}{logical; if \code{TRUE} and \code{file} is a pathname,
    the \R working directory is temporarily changed to the directory
    containing \code{file} for evaluating.}
    \item{\code{encoding}}{character vector.  The encoding(s) to be assumed when
    \code{file} is a character string: see \code{\link[base]{file}}.  A
    possible value is \code{"unknown"} when the encoding is guessed: see
    the \sQuote{Encodings} section.}
    \item{\code{continue.echo}}{character; gives the prompt to use on
    continuation lines if \code{echo = TRUE}.}
    \item{\code{skip.echo}}{integer; how many comment lines at the start of the
    file to skip if \code{echo = TRUE}.}
    \item{\code{keep.source}}{logical: should the source formatting be retained
    when echoing expressions, if possible?}
  }}
}
\value{
A new environment containing the results of the sourced R code
}
\description{
Retrieve the R code from an RMarkdown file and source it into a new environment variable. Uses \code{\link[knitr:knit]{knitr::purl()}}, which comments-out any chunks that are not meant to be evaluated (i.e., \code{eval = F}).
}
